pipeline {

 //Donde se va a ejecutar el Pipeline
 agent {
  label 'Slave_Induccion'
 }
 triggers {
  pollSCM('@hourly')
 }


  environment{
    PROJETC_PATH_JMETER= '/opt/Apache/apache-jmeter-5.0/bin'
  }


 //Opciones específicas de Pipeline dentro del Pipeline
 options {
  //Mantener artefactos y salida de consola para el # específico de ejecuciones recientes del Pipeline.
  buildDiscarder(logRotator(numToKeepStr: '3'))
  //No permitir ejecuciones concurrentes de Pipeline
  disableConcurrentBuilds()
 }

 //Una sección que define las herramientas para “autoinstalar” y poner en la PATH
 tools {
  jdk 'JDK8_Centos' //Preinstalada en la Configuración del Master
  gradle 'Gradle5.6_Centos' //Preinstalada en la Configuración del Master
 }

 //Aquí comienzan los “items” del Pipeline
 stages {

  stage('Checkout') {
   steps {
    echo "------------>Checkout<------------"
    checkout([
     $class: 'GitSCM',
     branches: [
      [name: '*/master']
     ],
     doGenerateSubmoduleConfigurations: false,
     extensions: [],
     gitTool: 'Git_Centos',
     submoduleCfg: [],
     userRemoteConfigs: [
      [
       credentialsId: 'GitHub_santiceron023',
       url: 'https://github.com/santiceron023/TenisParkAdmin'
      ]
     ]
    ])
   }
  }

  stage('Build') {
   steps {
    echo "------------>Build<------------"
    dir("AdminTenisPark") {
     sh 'gradle build -x test'
    }
   }
  }

  stage('Tests') {
   steps {
    echo "------------>Tests<------------"
    dir("AdminTenisPark") {
      sh 'gradle test' // --debug'
    }
   }
  }

  stage('Static Code Analysis') {
   steps {
    echo '------------>Análisis de código estático<------------'
    withSonarQubeEnv('Sonar') {
     sh """${tool name: 'SonarScanner',
     type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    }/bin/sonar-scanner"""
    //-Dproject.settings = sonar - project.properties """
   }
  }
 }

//  stage('Test_carga') {
//     steps {
//         echo '------------>test carga<------------'                     
//         dir("${PROJETC_PATH_JMETER}"){                         
//             sh './jmeter  -n -t ${WORKSPACE}/testsApi.jmx -l ${WORKSPACE}/performacetest.jtl'   
//             performanceReport parsers: [[$class: 'JMeterParser', glob: "${WORKSPACE}/performacetest.jtl"]], sourceDataFiles: "${WORKSPACE}/performacetest.jtl", errorFailedThreshold: 10, errorUnstableThreshold: 15, ignoreFailedBuilds: false, ignoreUnstableBuilds: false, relativeFailedThresholdNegative: 0, relativeFailedThresholdPositive: 0, relativeUnstableThresholdNegative: 0, relativeUnstableThresholdPositive: 0
//         }
//     }
// }

}


post {
 always {
  echo 'This will always run'
 }

 //success {
 //echo 'This will run only if successful'
 //junit 'build/test-results/test/*.xml'
 // junit '**/test-results/test/*.xml'
 //}

 failure {
  echo 'This will run only if failed'
  mail(to: 'santiago.ceron@ceiba.com.co', subject: "Failed Pipeline:${currentBuild.fullDisplayName}",
   body: "Something is wrong with ${env.BUILD_URL}")
 }

 unstable {
  echo 'This will run only if the run was marked as unstable'
 }

 changed {
  echo 'This will run only if the state of the Pipeline has changed'
  echo 'For example, if the Pipeline was previously failing but is now successful'
 }
}


}